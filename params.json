{"name":"Doubly-linked-list-api","tagline":"A doubly linked list C API that can accept any Data type that provides a set of requested methods","body":"#Doubly Linked List C-API#\r\nA doubly linked list C-API that can accept any data type that is wrapped within a struct and provides a set of requested methods.  \r\nIt is implemented with opaque pointers for abstraction and security. \r\n\r\n## Introducing version 2.0 - Iterators\r\n**A brief changelog**  \r\n1. Added support for iterators (look below for more info)  \r\n2. Changed ugly `dllistptr` to a more [user and C]-friendly naming convention, that is `list_t` (**important**)  \r\n3. Renamed the API files to a more C-like naming convention, like this: `doubly_linked_list_adt.c/h`  \r\n4. Updated demo to include some of the iterator functionality  \r\n5. This version was extensively tested with a multithreaded project, that used the list with about 10 datatypes  \r\n6. Added a copy-constructor-like method to copy lists  \r\n7. *In big programs, compile with -O2 or -O3 to see the magic*\r\n\r\n## Changelog\r\n~~~\r\n[*] 2.1 - Upgraded search/ access of iterators (from linear to binary search)\r\n[*] 2.0 - Iterators support\r\n[*] 1.0 - Initial release\r\n~~~\r\n\r\n##Getting started with the API\r\n1. You will need to copy the `doubly_linked_list_adt.c` and `doubly_linked_list_adt.h` files  to your project and include the header file to your source code\r\n2. Implement the required functions for the API, stated [**here**](DATATYPE_REQUIREMENTS.md), in a source file and provide the prototypes in a header file\r\n3. To use a list, declare a `list_t` variable and pass it to `dll_init` function\r\n4. Declare and prepare a *Datatype* dummy variable, allocate it with your function and call any of the `dll_insert*` variants (depending on your needs) \r\n\r\n    > **N.B.:** To add other elements to the list, **don't allocate an object again**, just update the previous one to insert it\r\n\r\n5. When you're done with your list, only then you call the *free_datatype* function you've written  \r\n6. Finally, pass the `list_t` variable to `dll_destroy` function to deallocate the memory needed\r\n\r\n\r\n##Documentation for each aspect of the project can be found here\r\n- [**Core API**](API_METHODS.md)\r\n- [**Iterators API**](ITER_METHODS.md)\r\n- [**Datatype requirements**](DATATYPE_REQUIREMENTS.md)\r\n\r\n---\r\n**For anything you might need, suggestion, bug report, create a new issue or a pull-request**\r\n","google":"UA-42440163-3","note":"Don't delete this file! It's used internally to help with page regeneration."}